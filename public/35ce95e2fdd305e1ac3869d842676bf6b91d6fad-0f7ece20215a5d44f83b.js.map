{"version":3,"sources":["webpack://melodyfy/./src/components/molecules/albumn-card/AlbumCard.js","webpack://melodyfy/./src/services/spotify-web-api.js"],"names":["AlbumnCard","imageUrl","title","by","className","src","alt","variant","_baseUri","_accessToken","_promiseImplementation","WrapPromiseWithAbort","_extend","_performRequest","_checkParamsAndPerformRequest","Constr","SpotifyWebApi","promise","onAbort","abort","args","Array","prototype","slice","call","arguments","target","objects","forEach","object","j","hasOwnProperty","requestData","callback","req","XMLHttpRequest","promiseFunction","resolve","reject","type","open","url","parameters","qs","key","value","encodeURIComponent","length","substring","_buildUrl","params","setRequestHeader","onreadystatechange","readyState","data","responseText","JSON","parse","e","console","error","status","success","send","postData","contentType","stringify","returnedPromise","deferred","defer","resolvedResult","rejectedResult","window","Promise","_promiseProvider","options","optionsAlwaysExtendParams","opt","cb","constructor","getGeneric","getMe","getMySavedTracks","addToMySavedTracks","trackIds","removeFromMySavedTracks","containsMySavedTracks","ids","join","getMySavedAlbums","addToMySavedAlbums","albumIds","removeFromMySavedAlbums","containsMySavedAlbums","getMyTopArtists","getMyTopTracks","getMyRecentlyPlayedTracks","followUsers","userIds","followArtists","artistIds","followPlaylist","playlistId","unfollowUsers","unfollowArtists","unfollowPlaylist","isFollowingUsers","isFollowingArtists","areFollowingPlaylist","getFollowedArtists","getUser","userId","getUserPlaylists","getPlaylist","getPlaylistTracks","getPlaylistCoverImage","createPlaylist","changePlaylistDetails","addTracksToPlaylist","uris","replaceTracksInPlaylist","reorderTracksInPlaylist","rangeStart","insertBefore","range_start","insert_before","removeTracksFromPlaylist","dataToBeSent","map","uri","tracks","removeTracksFromPlaylistWithSnapshotId","snapshotId","snapshot_id","removeTracksFromPlaylistInPositions","positions","uploadCustomPlaylistCoverImage","imageData","replace","getAlbum","albumId","getAlbumTracks","getAlbums","getTrack","trackId","getTracks","getArtist","artistId","getArtists","getArtistAlbums","getArtistTopTracks","countryId","country","getArtistRelatedArtists","getFeaturedPlaylists","getNewReleases","getCategories","getCategory","categoryId","getCategoryPlaylists","search","query","types","q","searchAlbums","this","searchArtists","searchTracks","searchPlaylists","searchShows","searchEpisodes","getAudioFeaturesForTrack","getAudioFeaturesForTracks","getAudioAnalysisForTrack","getRecommendations","getAvailableGenreSeeds","getMyDevices","getMyCurrentPlaybackState","getMyCurrentPlayingTrack","transferMyPlayback","deviceIds","device_ids","play","device_id","field","queue","pause","skipToNext","skipToPrevious","seek","position_ms","setRepeat","state","setVolume","volume_percent","setShuffle","getShow","showId","getShows","showIds","getMySavedShows","addToMySavedShows","removeFromMySavedShows","containsMySavedShows","getShowEpisodes","getEpisode","episodeId","getEpisodes","episodeIds","getAccessToken","setAccessToken","accessToken","setPromiseImplementation","PromiseImplementation","valid","p","then","catch","Error","module","exports"],"mappings":"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","file":"35ce95e2fdd305e1ac3869d842676bf6b91d6fad-0f7ece20215a5d44f83b.js","sourcesContent":["import React from \"react\"\nimport { Typography } from \"../../atoms/typography/Typography\"\nimport \"./albumCard.scss\"\n\nexport default function AlbumnCard({ imageUrl, title, by }) {\n  return (\n    <div className=\"m-album-card\">\n      <img className=\"m-album-card__img\" src={imageUrl} alt={title} />\n      <Typography variant=\"p\">{title}</Typography>\n      <Typography variant=\"p\">\n        <i>By {by} </i>\n      </Typography>\n    </div>\n  )\n}\n","/* global module */\n// 'use strict';\n\n/**\n * Class representing the API\n */\nvar SpotifyWebApi = (function () {\n  var _baseUri = \"https://api.spotify.com/v1\"\n  var _accessToken = null\n  var _promiseImplementation = null\n\n  var WrapPromiseWithAbort = function (promise, onAbort) {\n    promise.abort = onAbort\n    return promise\n  }\n\n  var _promiseProvider = function (promiseFunction, onAbort) {\n    var returnedPromise\n    if (_promiseImplementation !== null) {\n      var deferred = _promiseImplementation.defer()\n      promiseFunction(\n        function (resolvedResult) {\n          deferred.resolve(resolvedResult)\n        },\n        function (rejectedResult) {\n          deferred.reject(rejectedResult)\n        }\n      )\n      returnedPromise = deferred.promise\n    } else {\n      if (window.Promise) {\n        returnedPromise = new window.Promise(promiseFunction)\n      }\n    }\n\n    if (returnedPromise) {\n      return new WrapPromiseWithAbort(returnedPromise, onAbort)\n    } else {\n      return null\n    }\n  }\n\n  var _extend = function () {\n    var args = Array.prototype.slice.call(arguments)\n    var target = args[0]\n    var objects = args.slice(1)\n    target = target || {}\n    objects.forEach(function (object) {\n      for (var j in object) {\n        if (object.hasOwnProperty(j)) {\n          target[j] = object[j]\n        }\n      }\n    })\n    return target\n  }\n\n  var _buildUrl = function (url, parameters) {\n    var qs = \"\"\n    for (var key in parameters) {\n      if (parameters.hasOwnProperty(key)) {\n        var value = parameters[key]\n        qs += encodeURIComponent(key) + \"=\" + encodeURIComponent(value) + \"&\"\n      }\n    }\n    if (qs.length > 0) {\n      // chop off last '&'\n      qs = qs.substring(0, qs.length - 1)\n      url = url + \"?\" + qs\n    }\n    return url\n  }\n\n  var _performRequest = function (requestData, callback) {\n    var req = new XMLHttpRequest()\n\n    var promiseFunction = function (resolve, reject) {\n      function success(data) {\n        if (resolve) {\n          resolve(data)\n        }\n        if (callback) {\n          callback(null, data)\n        }\n      }\n\n      function failure() {\n        if (reject) {\n          reject(req)\n        }\n        if (callback) {\n          callback(req, null)\n        }\n      }\n\n      var type = requestData.type || \"GET\"\n      req.open(type, _buildUrl(requestData.url, requestData.params))\n      if (_accessToken) {\n        req.setRequestHeader(\"Authorization\", \"Bearer \" + _accessToken)\n      }\n\n      req.onreadystatechange = function () {\n        if (req.readyState === 4) {\n          var data = null\n          try {\n            data = req.responseText ? JSON.parse(req.responseText) : \"\"\n          } catch (e) {\n            console.error(e)\n          }\n\n          if (req.status >= 200 && req.status < 300) {\n            success(data)\n          } else {\n            failure()\n          }\n        }\n      }\n\n      if (type === \"GET\") {\n        req.send(null)\n      } else {\n        var postData = null\n        if (requestData.postData) {\n          if (requestData.contentType === \"image/jpeg\") {\n            postData = requestData.postData\n            req.setRequestHeader(\"Content-Type\", requestData.contentType)\n          } else {\n            postData = JSON.stringify(requestData.postData)\n            req.setRequestHeader(\"Content-Type\", \"application/json\")\n          }\n        }\n        req.send(postData)\n      }\n    }\n\n    if (callback) {\n      promiseFunction()\n      return null\n    } else {\n      return _promiseProvider(promiseFunction, function () {\n        req.abort()\n      })\n    }\n  }\n\n  var _checkParamsAndPerformRequest = function (\n    requestData,\n    options,\n    callback,\n    optionsAlwaysExtendParams\n  ) {\n    var opt = {}\n    var cb = null\n\n    if (typeof options === \"object\") {\n      opt = options\n      cb = callback\n    } else if (typeof options === \"function\") {\n      cb = options\n    }\n\n    // options extend postData, if any. Otherwise they extend parameters sent in the url\n    var type = requestData.type || \"GET\"\n    if (type !== \"GET\" && requestData.postData && !optionsAlwaysExtendParams) {\n      requestData.postData = _extend(requestData.postData, opt)\n    } else {\n      requestData.params = _extend(requestData.params, opt)\n    }\n    return _performRequest(requestData, cb)\n  }\n\n  /**\n   * Creates an instance of the wrapper\n   * @constructor\n   */\n  var Constr = function () {}\n\n  Constr.prototype = {\n    constructor: SpotifyWebApi,\n  }\n\n  /**\n   * Fetches a resource through a generic GET request.\n   *\n   * @param {string} url The URL to be fetched\n   * @param {function(Object,Object)} callback An optional callback\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getGeneric = function (url, callback) {\n    var requestData = {\n      url: url,\n    }\n    return _checkParamsAndPerformRequest(requestData, callback)\n  }\n\n  /**\n   * Fetches information about the current user.\n   * See [Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMe = function (options, callback) {\n    var requestData = {\n      url: _baseUri + \"/me\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches current user's saved tracks.\n   * See [Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/tracks\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Adds a list of tracks to the current user's saved tracks.\n   * See [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedTracks = function (trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/tracks\",\n      type: \"PUT\",\n      postData: trackIds,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Remove a list of tracks from the current user's saved tracks.\n   * See [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedTracks = function (\n    trackIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + \"/me/tracks\",\n      type: \"DELETE\",\n      postData: trackIds,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Checks if the current user's saved tracks contains a certain list of tracks.\n   * See [Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedTracks = function (\n    trackIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + \"/me/tracks/contains\",\n      params: { ids: trackIds.join(\",\") },\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Get a list of the albums saved in the current Spotify user's \"Your Music\" library.\n   * See [Get Current User's Saved Albums](https://developer.spotify.com/web-api/get-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedAlbums = function (options, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/albums\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Save one or more albums to the current user's \"Your Music\" library.\n   * See [Save Albums for Current User](https://developer.spotify.com/web-api/save-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedAlbums = function (albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/albums\",\n      type: \"PUT\",\n      postData: albumIds,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Remove one or more albums from the current user's \"Your Music\" library.\n   * See [Remove Albums for Current User](https://developer.spotify.com/web-api/remove-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedAlbums = function (\n    albumIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + \"/me/albums\",\n      type: \"DELETE\",\n      postData: albumIds,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Check if one or more albums is already saved in the current Spotify user's \"Your Music\" library.\n   * See [Check User's Saved Albums](https://developer.spotify.com/web-api/check-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedAlbums = function (\n    albumIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + \"/me/albums/contains\",\n      params: { ids: albumIds.join(\",\") },\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Get the current user’s top artists based on calculated affinity.\n   * See [Get a User’s Top Artists](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopArtists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/top/artists\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Get the current user’s top tracks based on calculated affinity.\n   * See [Get a User’s Top Tracks](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/top/tracks\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Get tracks from the current user’s recently played tracks.\n   * See [Get Current User’s Recently Played Tracks](https://developer.spotify.com/web-api/web-api-personalization-endpoints/get-recently-played/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyRecentlyPlayedTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/player/recently-played\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Adds the current user as a follower of one or more other Spotify users.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/following/\",\n      type: \"PUT\",\n      params: {\n        ids: userIds.join(\",\"),\n        type: \"user\",\n      },\n    }\n    return _checkParamsAndPerformRequest(requestData, callback)\n  }\n\n  /**\n   * Adds the current user as a follower of one or more artists.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/following/\",\n      type: \"PUT\",\n      params: {\n        ids: artistIds.join(\",\"),\n        type: \"artist\",\n      },\n    }\n    return _checkParamsAndPerformRequest(requestData, callback)\n  }\n\n  /**\n   * Add the current user as a follower of one playlist.\n   * See [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed. For instance,\n   * whether you want the playlist to be followed privately ({public: false})\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followPlaylist = function (playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/playlists/\" + playlistId + \"/followers\",\n      type: \"PUT\",\n      postData: {},\n    }\n\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Removes the current user as a follower of one or more other Spotify users.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/following/\",\n      type: \"DELETE\",\n      params: {\n        ids: userIds.join(\",\"),\n        type: \"user\",\n      },\n    }\n    return _checkParamsAndPerformRequest(requestData, callback)\n  }\n\n  /**\n   * Removes the current user as a follower of one or more artists.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/following/\",\n      type: \"DELETE\",\n      params: {\n        ids: artistIds.join(\",\"),\n        type: \"artist\",\n      },\n    }\n    return _checkParamsAndPerformRequest(requestData, callback)\n  }\n\n  /**\n   * Remove the current user as a follower of one playlist.\n   * See [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowPlaylist = function (playlistId, callback) {\n    var requestData = {\n      url: _baseUri + \"/playlists/\" + playlistId + \"/followers\",\n      type: \"DELETE\",\n    }\n    return _checkParamsAndPerformRequest(requestData, callback)\n  }\n\n  /**\n   * Checks to see if the current user is following one or more other Spotify users.\n   * See [Check if Current User Follows Users or Artists](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the users sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/following/contains\",\n      type: \"GET\",\n      params: {\n        ids: userIds.join(\",\"),\n        type: \"user\",\n      },\n    }\n    return _checkParamsAndPerformRequest(requestData, callback)\n  }\n\n  /**\n   * Checks to see if the current user is following one or more artists.\n   * See [Check if Current User Follows](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the artists sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/following/contains\",\n      type: \"GET\",\n      params: {\n        ids: artistIds.join(\",\"),\n        type: \"artist\",\n      },\n    }\n    return _checkParamsAndPerformRequest(requestData, callback)\n  }\n\n  /**\n   * Check to see if one or more Spotify users are following a specified playlist.\n   * See [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the users are following the playlist sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.areFollowingPlaylist = function (\n    playlistId,\n    userIds,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + \"/playlists/\" + playlistId + \"/followers/contains\",\n      type: \"GET\",\n      params: {\n        ids: userIds.join(\",\"),\n      },\n    }\n    return _checkParamsAndPerformRequest(requestData, callback)\n  }\n\n  /**\n   * Get the current user's followed artists.\n   * See [Get User's Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} [options] Options, being after and limit.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an object with a paged object containing\n   * artists.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * artists objects. Not returned if a callback is given.\n   */\n  Constr.prototype.getFollowedArtists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/following\",\n      type: \"GET\",\n      params: {\n        type: \"artist\",\n      },\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches information about a specific user.\n   * See [Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUser = function (userId, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/users/\" + encodeURIComponent(userId),\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches a list of the current user's playlists.\n   * See [Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\n   * the permissions will be used.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUserPlaylists = function (userId, options, callback) {\n    var requestData\n    if (typeof userId === \"string\") {\n      requestData = {\n        url: _baseUri + \"/users/\" + encodeURIComponent(userId) + \"/playlists\",\n      }\n    } else {\n      requestData = {\n        url: _baseUri + \"/me/playlists\",\n      }\n      callback = options\n      options = userId\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches a specific playlist.\n   * See [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylist = function (playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/playlists/\" + playlistId,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches the tracks from a specific playlist.\n   * See [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylistTracks = function (\n    playlistId,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + \"/playlists/\" + playlistId + \"/tracks\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Gets the current image associated with a specific playlist.\n   * See [Get a Playlist Cover Image](https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist-cover/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:playlist:<here_is_the_playlist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylistCoverImage = function (playlistId, callback) {\n    var requestData = {\n      url: _baseUri + \"/playlists/\" + playlistId + \"/images\",\n    }\n    return _checkParamsAndPerformRequest(requestData, callback)\n  }\n\n  /**\n   * Creates a playlist and stores it in the current user's library.\n   * See [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.createPlaylist = function (userId, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/users/\" + encodeURIComponent(userId) + \"/playlists\",\n      type: \"POST\",\n      postData: options,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Change a playlist's name and public/private state\n   * See [Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} data A JSON object with the data to update. E.g. {name: 'A new name', public: true}\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.changePlaylistDetails = function (\n    playlistId,\n    data,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + \"/playlists/\" + playlistId,\n      type: \"PUT\",\n      postData: data,\n    }\n    return _checkParamsAndPerformRequest(requestData, data, callback)\n  }\n\n  /**\n   * Add tracks to a playlist.\n   * See [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addTracksToPlaylist = function (\n    playlistId,\n    uris,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + \"/playlists/\" + playlistId + \"/tracks\",\n      type: \"POST\",\n      postData: {\n        uris: uris,\n      },\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback, true)\n  }\n\n  /**\n   * Replace the tracks of a playlist\n   * See [Replace a Playlist's Tracks](https://developer.spotify.com/web-api/replace-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.replaceTracksInPlaylist = function (\n    playlistId,\n    uris,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + \"/playlists/\" + playlistId + \"/tracks\",\n      type: \"PUT\",\n      postData: { uris: uris },\n    }\n    return _checkParamsAndPerformRequest(requestData, {}, callback)\n  }\n\n  /**\n   * Reorder tracks in a playlist\n   * See [Reorder a Playlist’s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {number} rangeStart The position of the first track to be reordered.\n   * @param {number} insertBefore The position where the tracks should be inserted. To reorder the tracks to\n   * the end of the playlist, simply set insert_before to the position after the last track.\n   * @param {Object} options An object with optional parameters (range_length, snapshot_id)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.reorderTracksInPlaylist = function (\n    playlistId,\n    rangeStart,\n    insertBefore,\n    options,\n    callback\n  ) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + \"/playlists/\" + playlistId + \"/tracks\",\n      type: \"PUT\",\n      postData: {\n        range_start: rangeStart,\n        insert_before: insertBefore,\n      },\n    }\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Remove tracks from a playlist\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylist = function (\n    playlistId,\n    uris,\n    callback\n  ) {\n    var dataToBeSent = uris.map(function (uri) {\n      if (typeof uri === \"string\") {\n        return { uri: uri }\n      } else {\n        return uri\n      }\n    })\n\n    var requestData = {\n      url: _baseUri + \"/playlists/\" + playlistId + \"/tracks\",\n      type: \"DELETE\",\n      postData: { tracks: dataToBeSent },\n    }\n    return _checkParamsAndPerformRequest(requestData, {}, callback)\n  }\n\n  /**\n   * Remove tracks from a playlist, specifying a snapshot id.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistWithSnapshotId = function (\n    playlistId,\n    uris,\n    snapshotId,\n    callback\n  ) {\n    var dataToBeSent = uris.map(function (uri) {\n      if (typeof uri === \"string\") {\n        return { uri: uri }\n      } else {\n        return uri\n      }\n    })\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + \"/playlists/\" + playlistId + \"/tracks\",\n      type: \"DELETE\",\n      postData: {\n        tracks: dataToBeSent,\n        snapshot_id: snapshotId,\n      },\n    }\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback)\n  }\n\n  /**\n   * Remove tracks from a playlist, specifying the positions of the tracks to be removed.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<number>} positions array of integers containing the positions of the tracks to remove\n   * from the playlist.\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistInPositions = function (\n    playlistId,\n    positions,\n    snapshotId,\n    callback\n  ) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + \"/playlists/\" + playlistId + \"/tracks\",\n      type: \"DELETE\",\n      postData: {\n        positions: positions,\n        snapshot_id: snapshotId,\n      },\n    }\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback)\n  }\n\n  /**\n   * Upload a custom playlist cover image.\n   * See [Upload A Custom Playlist Cover Image](https://developer.spotify.com/web-api/upload-a-custom-playlist-cover-image/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {string} imageData Base64 encoded JPEG image data, maximum payload size is 256 KB.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.uploadCustomPlaylistCoverImage = function (\n    playlistId,\n    imageData,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + \"/playlists/\" + playlistId + \"/images\",\n      type: \"PUT\",\n      postData: imageData.replace(/^data:image\\/jpeg;base64,/, \"\"),\n      contentType: \"image/jpeg\",\n    }\n    return _checkParamsAndPerformRequest(requestData, {}, callback)\n  }\n\n  /**\n   * Fetches an album from the Spotify catalog.\n   * See [Get an Album](https://developer.spotify.com/web-api/get-album/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbum = function (albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/albums/\" + albumId,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches the tracks of an album from the Spotify catalog.\n   * See [Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbumTracks = function (albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/albums/\" + albumId + \"/tracks\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches multiple albums from the Spotify catalog.\n   * See [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbums = function (albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/albums/\",\n      params: { ids: albumIds.join(\",\") },\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches a track from the Spotify catalog.\n   * See [Get a Track](https://developer.spotify.com/web-api/get-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTrack = function (trackId, options, callback) {\n    var requestData = {}\n    requestData.url = _baseUri + \"/tracks/\" + trackId\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches multiple tracks from the Spotify catalog.\n   * See [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTracks = function (trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/tracks/\",\n      params: { ids: trackIds.join(\",\") },\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches an artist from the Spotify catalog.\n   * See [Get an Artist](https://developer.spotify.com/web-api/get-artist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtist = function (artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/artists/\" + artistId,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches multiple artists from the Spotify catalog.\n   * See [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtists = function (artistIds, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/artists/\",\n      params: { ids: artistIds.join(\",\") },\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches the albums of an artist from the Spotify catalog.\n   * See [Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistAlbums = function (artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/artists/\" + artistId + \"/albums\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches a list of top tracks of an artist from the Spotify catalog, for a specific country.\n   * See [Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {string} countryId The id of the country (e.g. ES for Spain or US for United States)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistTopTracks = function (\n    artistId,\n    countryId,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + \"/artists/\" + artistId + \"/top-tracks\",\n      params: { country: countryId },\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches a list of artists related with a given one from the Spotify catalog.\n   * See [Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistRelatedArtists = function (\n    artistId,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + \"/artists/\" + artistId + \"/related-artists\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches a list of Spotify featured playlists (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getFeaturedPlaylists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + \"/browse/featured-playlists\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches a list of new album releases featured in Spotify (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getNewReleases = function (options, callback) {\n    var requestData = {\n      url: _baseUri + \"/browse/new-releases\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a List of Categories](https://developer.spotify.com/web-api/get-list-categories/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategories = function (options, callback) {\n    var requestData = {\n      url: _baseUri + \"/browse/categories\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Get a single category used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a Category](https://developer.spotify.com/web-api/get-category/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategory = function (categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/browse/categories/\" + categoryId,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Get a list of Spotify playlists tagged with a particular category.\n   * See [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategoryPlaylists = function (\n    categoryId,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + \"/browse/categories/\" + categoryId + \"/playlists\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Get Spotify catalog information about artists, albums, tracks or playlists that match a keyword string.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Array<string>} types An array of item types to search across.\n   * Valid types are: 'album', 'artist', 'playlist', and 'track'.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.search = function (query, types, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/search/\",\n      params: {\n        q: query,\n        type: types.join(\",\"),\n      },\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches albums from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchAlbums = function (query, options, callback) {\n    return this.search(query, [\"album\"], options, callback)\n  }\n\n  /**\n   * Fetches artists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchArtists = function (query, options, callback) {\n    return this.search(query, [\"artist\"], options, callback)\n  }\n\n  /**\n   * Fetches tracks from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchTracks = function (query, options, callback) {\n    return this.search(query, [\"track\"], options, callback)\n  }\n\n  /**\n   * Fetches playlists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchPlaylists = function (query, options, callback) {\n    return this.search(query, [\"playlist\"], options, callback)\n  }\n\n  /**\n   * Fetches shows from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchShows = function (query, options, callback) {\n    return this.search(query, [\"show\"], options, callback)\n  }\n\n  /**\n   * Fetches episodes from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchEpisodes = function (query, options, callback) {\n    return this.search(query, [\"episode\"], options, callback)\n  }\n\n  /**\n   * Get audio features for a single track identified by its unique Spotify ID.\n   * See [Get Audio Features for a Track](https://developer.spotify.com/web-api/get-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTrack = function (trackId, callback) {\n    var requestData = {}\n    requestData.url = _baseUri + \"/audio-features/\" + trackId\n    return _checkParamsAndPerformRequest(requestData, {}, callback)\n  }\n\n  /**\n   * Get audio features for multiple tracks based on their Spotify IDs.\n   * See [Get Audio Features for Several Tracks](https://developer.spotify.com/web-api/get-several-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTracks = function (trackIds, callback) {\n    var requestData = {\n      url: _baseUri + \"/audio-features\",\n      params: { ids: trackIds },\n    }\n    return _checkParamsAndPerformRequest(requestData, {}, callback)\n  }\n\n  /**\n   * Get audio analysis for a single track identified by its unique Spotify ID.\n   * See [Get Audio Analysis for a Track](https://developer.spotify.com/web-api/get-audio-analysis/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioAnalysisForTrack = function (trackId, callback) {\n    var requestData = {}\n    requestData.url = _baseUri + \"/audio-analysis/\" + trackId\n    return _checkParamsAndPerformRequest(requestData, {}, callback)\n  }\n\n  /**\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\n   * See [Get Recommendations Based on Seeds](https://developer.spotify.com/web-api/get-recommendations/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getRecommendations = function (options, callback) {\n    var requestData = {\n      url: _baseUri + \"/recommendations\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Retrieve a list of available genres seed parameter values for recommendations.\n   * See [Available Genre Seeds](https://developer.spotify.com/web-api/get-recommendations/#available-genre-seeds) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAvailableGenreSeeds = function (callback) {\n    var requestData = {\n      url: _baseUri + \"/recommendations/available-genre-seeds\",\n    }\n    return _checkParamsAndPerformRequest(requestData, {}, callback)\n  }\n\n  /**\n   * Get information about a user’s available devices.\n   * See [Get a User’s Available Devices](https://developer.spotify.com/web-api/get-a-users-available-devices/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyDevices = function (callback) {\n    var requestData = {\n      url: _baseUri + \"/me/player/devices\",\n    }\n    return _checkParamsAndPerformRequest(requestData, {}, callback)\n  }\n\n  /**\n   * Get information about the user’s current playback state, including track, track progress, and active device.\n   * See [Get Information About The User’s Current Playback](https://developer.spotify.com/web-api/get-information-about-the-users-current-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlaybackState = function (options, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/player\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Get the object currently being played on the user’s Spotify account.\n   * See [Get the User’s Currently Playing Track](https://developer.spotify.com/web-api/get-the-users-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlayingTrack = function (options, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/player/currently-playing\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Transfer playback to a new device and determine if it should start playing.\n   * See [Transfer a User’s Playback](https://developer.spotify.com/web-api/transfer-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} deviceIds A JSON array containing the ID of the device on which playback should be started/transferred.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.transferMyPlayback = function (\n    deviceIds,\n    options,\n    callback\n  ) {\n    var postData = options || {}\n    postData.device_ids = deviceIds\n    var requestData = {\n      type: \"PUT\",\n      url: _baseUri + \"/me/player\",\n      postData: postData,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Play a track on the user's active device\n   * See [Start/Resume a User's Playback](https://developer.spotify.com/documentation/web-api/reference/player/start-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.play = function (options, callback) {\n    options = options || {}\n    var params =\n      \"device_id\" in options ? { device_id: options.device_id } : null\n    var postData = {}\n    ;[\"context_uri\", \"uris\", \"offset\", \"position_ms\"].forEach(function (field) {\n      if (field in options) {\n        postData[field] = options[field]\n      }\n    })\n    var requestData = {\n      type: \"PUT\",\n      url: _baseUri + \"/me/player/play\",\n      params: params,\n      postData: postData,\n    }\n\n    // need to clear options so it doesn't add all of them to the query params\n    var newOptions = typeof options === \"function\" ? options : {}\n    return _checkParamsAndPerformRequest(requestData, newOptions, callback)\n  }\n\n  /**\n   * Add an item to the end of the user’s current playback queue.\n   * See [Add an Item to the User's Playback Queue](https://developer.spotify.com/documentation/web-api/reference/player/add-to-queue/) on\n   * the Spotify Developer site for more information about the endpoint.\n   * @param {string} uri The uri of the item to add to the queue. Must be a track or an episode uri.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.queue = function (uri, options, callback) {\n    options = options || {}\n    var params =\n      \"device_id\" in options\n        ? { uri: uri, device_id: options.device_id }\n        : { uri: uri }\n    var requestData = {\n      type: \"POST\",\n      url: _baseUri + \"/me/player/queue\",\n      params: params,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Pause playback on the user’s account.\n   * See [Pause a User’s Playback](https://developer.spotify.com/web-api/pause-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.pause = function (options, callback) {\n    options = options || {}\n    var params =\n      \"device_id\" in options ? { device_id: options.device_id } : null\n    var requestData = {\n      type: \"PUT\",\n      url: _baseUri + \"/me/player/pause\",\n      params: params,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Skips to next track in the user’s queue.\n   * See [Skip User’s Playback To Next Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToNext = function (options, callback) {\n    options = options || {}\n    var params =\n      \"device_id\" in options ? { device_id: options.device_id } : null\n    var requestData = {\n      type: \"POST\",\n      url: _baseUri + \"/me/player/next\",\n      params: params,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Skips to previous track in the user’s queue.\n   * Note that this will ALWAYS skip to the previous track, regardless of the current track’s progress.\n   * Returning to the start of the current track should be performed using `.seek()`\n   * See [Skip User’s Playback To Previous Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToPrevious = function (options, callback) {\n    options = options || {}\n    var params =\n      \"device_id\" in options ? { device_id: options.device_id } : null\n    var requestData = {\n      type: \"POST\",\n      url: _baseUri + \"/me/player/previous\",\n      params: params,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Seeks to the given position in the user’s currently playing track.\n   * See [Seek To Position In Currently Playing Track](https://developer.spotify.com/web-api/seek-to-position-in-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} position_ms The position in milliseconds to seek to. Must be a positive number.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.seek = function (position_ms, options, callback) {\n    options = options || {}\n    var params = {\n      position_ms: position_ms,\n    }\n    if (\"device_id\" in options) {\n      params.device_id = options.device_id\n    }\n    var requestData = {\n      type: \"PUT\",\n      url: _baseUri + \"/me/player/seek\",\n      params: params,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Set the repeat mode for the user’s playback. Options are repeat-track, repeat-context, and off.\n   * See [Set Repeat Mode On User’s Playback](https://developer.spotify.com/web-api/set-repeat-mode-on-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {String} state A string set to 'track', 'context' or 'off'.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setRepeat = function (state, options, callback) {\n    options = options || {}\n    var params = {\n      state: state,\n    }\n    if (\"device_id\" in options) {\n      params.device_id = options.device_id\n    }\n    var requestData = {\n      type: \"PUT\",\n      url: _baseUri + \"/me/player/repeat\",\n      params: params,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Set the volume for the user’s current playback device.\n   * See [Set Volume For User’s Playback](https://developer.spotify.com/web-api/set-volume-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} volume_percent The volume to set. Must be a value from 0 to 100 inclusive.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setVolume = function (volume_percent, options, callback) {\n    options = options || {}\n    var params = {\n      volume_percent: volume_percent,\n    }\n    if (\"device_id\" in options) {\n      params.device_id = options.device_id\n    }\n    var requestData = {\n      type: \"PUT\",\n      url: _baseUri + \"/me/player/volume\",\n      params: params,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Toggle shuffle on or off for user’s playback.\n   * See [Toggle Shuffle For User’s Playback](https://developer.spotify.com/web-api/toggle-shuffle-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {bool} state Whether or not to shuffle user's playback.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setShuffle = function (state, options, callback) {\n    options = options || {}\n    var params = {\n      state: state,\n    }\n    if (\"device_id\" in options) {\n      params.device_id = options.device_id\n    }\n    var requestData = {\n      type: \"PUT\",\n      url: _baseUri + \"/me/player/shuffle\",\n      params: params,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches a show from the Spotify catalog.\n   * See [Get a Show](https://developer.spotify.com/documentation/web-api/reference/shows/get-a-show/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} showId The id of the show. If you know the Spotify URI it is easy\n   * to find the show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getShow = function (showId, options, callback) {\n    var requestData = {}\n    requestData.url = _baseUri + \"/shows/\" + showId\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches multiple shows from the Spotify catalog.\n   * See [Get Several Shows](https://developer.spotify.com/documentation/web-api/reference/shows/get-several-shows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getShows = function (showIds, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/shows/\",\n      params: { ids: showIds.join(\",\") },\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches current user's saved shows.\n   * See [Get Current User's Saved Shows](https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-shows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedShows = function (options, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/shows\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Adds a list of shows to the current user's saved shows.\n   * See [Save Shows for Current User](https://developer.spotify.com/documentation/web-api/reference/library/save-shows-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedShows = function (showIds, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/me/shows\",\n      type: \"PUT\",\n      postData: showIds,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Remove a list of shows from the current user's saved shows.\n   * See [Remove Shows for Current User](https://developer.spotify.com/documentation/web-api/reference/library/remove-shows-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedShows = function (\n    showIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + \"/me/shows\",\n      type: \"DELETE\",\n      postData: showIds,\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Checks if the current user's saved shows contains a certain list of shows.\n   * See [Check Current User's Saved Shows](https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-shows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedShows = function (\n    showIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + \"/me/shows/contains\",\n      params: { ids: showIds.join(\",\") },\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches the episodes of a show from the Spotify catalog.\n   * See [Get a Show's Episodes](https://developer.spotify.com/documentation/web-api/reference/shows/get-shows-episodes/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} showId The id of the show. If you know the Spotify URI it is easy\n   * to find the show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getShowEpisodes = function (showId, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/shows/\" + showId + \"/episodes\",\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches an episode from the Spotify catalog.\n   * See [Get an Episode](https://developer.spotify.com/documentation/web-api/reference/episodes/get-an-episode/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} episodeId The id of the episode. If you know the Spotify URI it is easy\n   * to find the episode id (e.g. spotify:episode:<here_is_the_episode_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getEpisode = function (episodeId, options, callback) {\n    var requestData = {}\n    requestData.url = _baseUri + \"/episodes/\" + episodeId\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Fetches multiple episodes from the Spotify catalog.\n   * See [Get Several Episodes](https://developer.spotify.com/documentation/web-api/reference/episodes/get-several-episodes/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} episodeIds The ids of the episodes. If you know their Spotify URI it is easy\n   * to find their episode id (e.g. spotify:episode:<here_is_the_episode_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getEpisodes = function (episodeIds, options, callback) {\n    var requestData = {\n      url: _baseUri + \"/episodes/\",\n      params: { ids: episodeIds.join(\",\") },\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback)\n  }\n\n  /**\n   * Gets the access token in use.\n   *\n   * @return {string} accessToken The access token\n   */\n  Constr.prototype.getAccessToken = function () {\n    return _accessToken\n  }\n\n  /**\n   * Sets the access token to be used.\n   * See [the Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/) on\n   * the Spotify Developer site for more information about obtaining an access token.\n   *\n   * @param {string} accessToken The access token\n   * @return {void}\n   */\n  Constr.prototype.setAccessToken = function (accessToken) {\n    _accessToken = accessToken\n  }\n\n  /**\n   * Sets an implementation of Promises/A+ to be used. E.g. Q, when.\n   * See [Conformant Implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md)\n   * for a list of some available options\n   *\n   * @param {Object} PromiseImplementation A Promises/A+ valid implementation\n   * @throws {Error} If the implementation being set doesn't conform with Promises/A+\n   * @return {void}\n   */\n  Constr.prototype.setPromiseImplementation = function (PromiseImplementation) {\n    var valid = false\n    try {\n      var p = new PromiseImplementation(function (resolve) {\n        resolve()\n      })\n      if (typeof p.then === \"function\" && typeof p.catch === \"function\") {\n        valid = true\n      }\n    } catch (e) {\n      console.error(e)\n    }\n    if (valid) {\n      _promiseImplementation = PromiseImplementation\n    } else {\n      throw new Error(\"Unsupported implementation of Promises/A+\")\n    }\n  }\n\n  return Constr\n})()\n\nif (typeof module === \"object\" && typeof module.exports === \"object\") {\n  module.exports = SpotifyWebApi\n}\n"],"sourceRoot":""}